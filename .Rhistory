?ls
ls()
library(swirl)
swirl()
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
?vapply
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass,mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
?matri
?mtarix
?matri
?matrix
x <- matrix(1:12, 3, 4)
x
y <- solve(x)
x <- matrix(1:9, 3, 3)
y <- solve(x)
?solve
x
hilbert <- function(n) { i <- 1:n; 1 / outer(i - 1, i, "+") }
hilbert
h8 <- hilbert(8)
h8
sh8 <- solve(h8)
sh8
source('~/R/Other Stuff/Assignment 2/ProgrammingAssignment2/cachematrix.R')
h8
cacheSolve(h8)
makeCachceMatrix(h8)
t1 <- makeCacheMatrix(h8)
cacheSolve(t1)
source('~/R/Other Stuff/Assignment 2/ProgrammingAssignment2/cachematrix.R')
cacheSolve(t1)
y
sg8
sh8
set.seed(1)
rpois(5,2)
?qpois
?rnorm
Rprof(NULL)
library(datasets)
Rprof()
y <- 11
x1 <- 2
x2 <- 3
fit <-lm(y~x1+x2)
Rprof(NULL)
?summaryRprof
summaryRprof()
swirl()
library(swirl)
swirl()
ls(plants)
ls()
class(plants)
dim(plants)
nrow(plants'')
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants, 10)
tail(plants, 15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6,4,replace=TRUE)
sample(1:6,4,replace=TRUE)
sample(1:6,4)
sample(1:20, 10)
letters
LETTERS
sample(LETTERS)
flips <- sample(c(0,1), c(0.3, 0.7))
flips <- sample(c(0,1), 100, replace = TRUE, prob = c(0.3,0.7))
flips
sum(flips)
?rbinom
rbinom(1, size = 100, prob = 0.7)
flips2 <-rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(n = 100, size = 100, prob = 0.7)
flips2 <- rbinom(100,1,prob = 0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(,mean = 100, sd = 25)
rnorm(10,mean = 100, sd = 25)
?rpois
rpois(5,10)
my_pois <- replicate(100, rpois(5,10))
my_pois
cm <- colmeans(my_pois)
cm <- colMeans(my_pois)
hist(cm)
library(XLConnect)
library(XLConnect)
install.packages("RMySQL")
library("RMySQL", lib.loc="~/R/win-library/3.4")
uscsDb <- dbConnect(MySQL(), user = "genome", host = "genome-mysql.cse.ucsc.edu")
result <- dbGetQuery(uscsDb, "show databases;"); dbDisconnect(ucscDb);
result <- dbGetQuery(uscsDb, "show databases;"); dbDisconnect(uscsDb);
result
install.packages("httr")
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github",key = "Iv1.2b91738baa699528", secret = "3c37b2b9f49fd02156efffb9b27742586c8a8a44")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp) 2
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/rate_limit", gtoken)
stop_for_status(req)
content(req)
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github", key = "Iv1.2b91738baa699528", secret = "3c37b2b9f49fd02156efffb9b27742586c8a8a44")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
content(req)
install.packages("httpuv")
library(jsonlite)
library(httpuv)
oauth_endpoints("github")
?oauth_endpoints
myapp <- oauth_app("github", key = "Iv1.2b91738baa699528", secret = "3c37b2b9f49fd02156efffb9b27742586c8a8a44")
github_token <- oauth2.0_token(oauth_endpoint("github", authorize = "https://github.comm/login/oauth/authorize", access = "https://github.com/login/oauth/access_token"), myapp)
github_token <- oauth2.0_token(oauth_endpoint("github", authorize = "https://github.com/login/oauth/authorize", access = "https://github.com/login/oauth/access_token"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
content(req)
remove.packages("httr", lib="~/R/win-library/3.4")
install.packages("httr")
library("httr", lib.loc="~/R/win-library/3.4")
library("jsonlite", lib.loc="~/R/win-library/3.4")
library("httpuv", lib.loc="~/R/win-library/3.4")
oauth_endpoints("github")
myapp <- oauth_app("github",key = "Iv1.01c9fd71ed580692", secret = "6edbc97862d13ac1bc4c970de099f55943a2fd72")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp, cache = FALSE)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
content(req)
stop_for_status(req)
library(swirl)
swirl()
mydf<- read.csv(path2csv, stringsAsFactors = FALSE)
dim(df)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
?tbl_df
?as_tibble
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
head(cran)
cran
select(cran, -time)
-5:20
-(5:20)
select(cran, -(x:size))
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" |country == "IN")
filter(cran, size > 100500 & r_os == "linux-gnu")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3,5,NA,10))
!is.na(c(3,5,NA,10))
filter(cran, !is.na(r_version == NA))
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size/ 2^20)
mutate(cran3, size_mb = size/ 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size + 1000)
summarize( cran, avg_bytes = mean(size))
library(dplyr)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package <- group_by(cran, package)
by_package
summarize(by_package, mean(size))
submit()
pack_sum
library(swirl)
swirl9
swirl()
qplot(hwy, data = mpg, aesthetic = drv)
?qplot
qplot(hwy, data = mpg, geom = "drv")
qplot(hwy, data = mpg, geom = drv)
skip()
qplot(displ, hwy, data = mpg, facets = .~drv)
qplot(hwy, data = mpg, facets = drv~., binwidth = 2)
qplot(displ, hwy, data = mpg, geom = c("point","smooth"), facets = .~drv)
g <- ggplot(mpg, c(displ, hwy))
g <- ggplot(mpg, displ, hwy)
?ggplot
g <- ggplot(mpg)
g <- ggplot(mpg, aes(displ, hwy))
summary(g)
g+geom_point()
g+geom_point()+geom_smooth()
g+geom_point()+geom_smooth("lm")
g+geom_point()+geom_smooth(method = "lm")
g+geom_point()+geom_smooth(method = "lm") +facet_grid(.~drv)
g+geom_point()+geom_smooth(method = "lm") +facet_grid(.~drv) + ggtitle("Swirl Rules!")
g+geom_point(color = "pink, size = 4, alpha = 1/2")+geom_smooth(method = "lm") +facet_grid(.~drv) + ggtitle("Swirl Rules!")
g+geom_point(color = "pink", size = 4, alpha = 1/2)+geom_smooth(method = "lm") +facet_grid(.~drv) + ggtitle("Swirl Rules!")
g+geom_point(color = "pink", size = 4, alpha = 1/2)
g+geom_point(size = 4, alpha = 1/2,aes(color = drv))
g+geom_point(aes(color = drv))+labs(title = "Swirl Rules!") + labs(x = "Displacement", y = "Hwy Mileage")
g + geom_point(aes(color = drv), size = 2, alpha = 1/2) + geom_smooth(size = 4, linetype = 3, method = "lm", se = FALSE)
g +geom_point(aes(color = drv)) +theme_bw(base_family = "Times")
plot(myx, myy, type = "l", ylim = c(-3,3))
ggplot(testdat, aes(x = myx, y = myy))
g <- ggplot(testdat, aes(x = myx, y = myy))
g + geomo_line()
g + geom_line()
g + geom_line() +ylim(-3,3)
g + geom_line() +coord_cartesian(ylim(-3,3))
g + geom_line() + coord_cartesian(ylim = c(-3,3))
g <- ggplot(mpg, aes(x = displ, y = hwy, color = factor(year)))
g +geom_point
g +geom_point()
g +geom_point() +facet_grid(drv~cyl, margins = TRUE)
g +geom_point() +facet_grid(drv~cyl, margins = TRUE) + geom_smooth(method = "lm", se = FALSE, size = 2, color = "black")
g +geom_point() +facet_grid(drv~cyl, margins = TRUE) + geom_smooth(method = "lm", se = FALSE, size = 2, color = "black"), labs(x = "Displacement", y = "Highway Mileage", title = "Swirl Rules!")
g +geom_point() +facet_grid(drv~cyl, margins = TRUE) + geom_smooth(method = "lm", se = FALSE, size = 2, color = "black")+ labs(x = "Displacement", y = "Highway Mileage", title = "Swirl Rules!")
str(diamonds)
qplot(price, data = diamonds)
range(diammonds$price)
range(diamonds$price)
qplot(price, data=diamonds, binwidth = 18497/30)
brk
now
counts
qplot(price, data=diamonds, binwidth = 18497/30, fill = cut)
qplot(price, data = diamonds, geom = "density")
qplot(price, data = diamonds, geom = "density", color = cut)
qplot(carat, price, data = diamonds)
qplot(carat, price, data = diamonds, shape = cut)
qplot(carat, price, data = diamonds, color = cut)
qplot(carat, price, data = diamonds, color = cut, method = "lm")
qplot(carat, price, data = diamonds, color = cut) + geom_smooth(method = "lm")
qplot(carat, price, data = diamonds, color = cut,facets = .~cut) + geom_smooth(method = "lm")
g <- ggplot(diamonds, aes(depth, price))
summary(g)
g + geom_point(alpha = 1/3)
cutpoints <- quantile(diamonds$carat, seq(0,1,length = 4), na.rm = TRUE)
cutpoints
?cut
diamonds$car2 <- cut(diamonds$carat, cutpoints)
g <- ggplot(diamonds, aes(depth,price))
g + geom_point(alpha = 1/3) + face_grid(cut~car2)
g + geom_point(alpha = 1/3) + facet_grid(cut~car2)
diamonds[myd,]
g + geom_point(alpha = 1/3) + facet_grid(cut~car2) +geom_smooth(method = "lm", size = 3, color = "pink")
ggplot(diamonds, aes(carat, price)) + geom_boxplot() +face_gride(.~cut)
ggplot(diamonds, aes(carat, price)) + geom_boxplot() +facet_grid(.~cut)
3
install.packages("nlme")
library(lattice)
library(nlme)
xyplot(weight~Time | Diet, BodyWeight)
?points
?lattice
?xyplot
text(5, "test")
panel.abline()
?panel.abline
?lines
?points
print.trellis
library(datasets)
data(airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
?qplot
library(swirl)
ll
swirl()
dist(dataFrame)
hclust(distxy)
hc <- hclust(distxy)
plot(hc)
plot(as.dendogram(hc))
plot(as.dendrogram(hc))
abline( h = 1.5, col = "blue")
abline( h =.4, col = "red")
5
12
abline(h = .05, col = "green")
dist(dFsm)
hc
heatmap(dataMatrix, col=cm.colors(25))
heatmap(mt)
mt
plot(denmt)
distmt
cmat
points(cx,cy, col = c("red","orange","purple"), pch = 3, cex = 2, lwd = 2)
mdist(x,y,cx,cy)
which.min(distTmp, 2, which.min)
apply(distTmp, 2, which.min)
points(x,y, pch = 19, cex = 2, col = cols1[newClust])
newClust
tapply(x, newClust, mena)
tapply(x, newClust, mean)
tapply(y, newClust, mean)
points(newCx, newCy, col = cols1, pch = 8, cex = 2, lwd = 2)
mdist(x,y,newCx, newCy)
apply(distTmp2, 2, which.min)
points(x,y,pch = 19, cex = 2, col = cols1[newClust2])
tapply(x, newClust2, mean)
tapply(y, newClust2, mean)
points(finalCx,finalCy, col = cols1, pch = 9, cex = 2, lwd = 2)
kmeans(dataFrame, centers = 3)
kmObj$iter
plot(x,y, col = kmObj$cluster, pch = 19, cex = 2)
points(kmObj$centers, col = c("black","red","green"), pch = 3, cex = 3, lwd = 3)
plot(x,y,col = kmeans(dataFrame, 6)$cluster, pch = 19, cex = 2)
plot(x,y,col = kmeans(dataFrame, 6)$cluster, pch = 19, cex = 2)
plot(x,y,col = kmeans(dataFrame, 6)$cluster, pch = 19, cex = 2)
head(dataMatrix)
heatmap(dataMatrix)
myedit(addPatt.R)
myedit("addPatt.R")
source("addPatt.R", local = TRUE)
heatmap(dataMatrix)
mat
svd(mat)
?svd
matu %*% t(matv)
matu %*% diag %*% t(matv)
svd(scale(mat))
prcomp(scale(mat))
sdv1$v[,1]
svd1$v[,1]
svd1$d
constantMatrix
head(constantMatrix)
svd2$d
svd2$v
svd2$v[,1:2]
svd2$d
dim(faceData)
a1 <- (svd1$u[,1]*svd1$d[1]) %*% svd1$v[,1]
a1 <- (svd1$u[,1]*svd1$d[1]) %*% t(svd1$v[,1])
myImage(a1)
a2 <- svd1$u[,1:2] %*% diag(svd1$d[1:2]) %*% t(svd1$v[,1:2])
myImage(a2)
myImage(svd1$u[,1:5] %*% diag(svd1$d[1:5]) %*% t(svd1$v[,1:5]))
myImage(svd1$u[,1:10] %*% diag(svd1$d[1:10]) %*% t(svd1$v[,1:10]))
dim(ssd)
names(ssd[,562:563])
table(ssd$subject)
sum(table(ssd$subject))
table(ssd$activity)
sub1 <- subset(ssd, subject == 1)
dim(sub1)
names(sub1[,1:12])
myedit("showXY.R")
showMe(1:6)
mdist <- dist(sub1[,1:3])
hclust(mdist)
hclustering <- hclust(mdist)
myplclust(hclustering, lab.col = unclass(sub1$activity))
mdist<- dist(sub1[,10:12])
hclustering <- hclust(mdist)
myplclust(hclustering, lab.col = unclass(sub1$activity))
svd1 <- svd(scale(sub1[,-c(562,563)]))
dim(svd1$u)
maxCon <- which.max(svd1$v[,2])
mdist <- dist(sub1[,c(10:12, maxCon)])
hclustering <- hclust(mdist)
myplclust(hclustering, lab.col = unclass(sub1$activity))
names(sub1[maxCon])
kClust <- kmeans(sub1[,-c(562:563)], centers = 6)
table(kClust$cluster, sub1$activity)
kClust <- kmeans(sub1[,-c(562:563)], centers = 6, nstart = 100)
table(kClust$cluster, sub1$activity)
dim(kClust$centers)
laying <- which(kClust$size == 29)
plot(kClust$centers[laying, 1:12], pch = 19, ylab = "Laying Cluster")
names(sub1[,1:3])
walkdown <- which(kClust$size == 49)
plot(kClust$centers[walkdown, 1:12], pch = 19, ylab = "Walkdown Cluster")
setwd("~/R/DataScienceExample/R Coursera/Reproducible Research/RepData_PeerAssessment1")
?read.csv
activity_data <- read.csv("activity.zip")
View(activity_data)
activity_data <- read.csv("activity.csv")
activity_data <- read.csv("./activity/activity.csv")
activity_data <- read.table("activity.zip", header = TRUE, sep = ",")
View(activity_data)
activity_data <- read.table("./activity/activity.csv", header = TRUE, sep = ",")
activity_data <- read.table("./activity.zip/activity.csv", header = TRUE, sep = ",")
?unz
?read.csv
activity_data <- read.csv(unz("activity.zip","activity.csv"))
View(activity_data)
str(activity_data)
?as.Date
activity_data$date <- as.Date(activity_data$date, "%Y-%m-%d")
str(activity_data)
head(activity_data)
mean_total <- mean(activity_data$steps, na.rm = TRUE)
mean_total <- mean(activity_data$steps, na.rm = TRUE)
?tapply
library(dplyr)
activity_data <- read.csv(unz("activity.zip","activity.csv"))
activity_data$date <- as.Date(activity_data$date, "%Y-%m-%d")
activity_data <- group_by(activity_data, date)
head(activity_data)
activity_data
test2 <- tapply(activity_data$steps, activity_data$date, sum, na.rm = TRUE)
str(test2)
head(test2)
?qplot
qplot(date, steps, data = activity_data)
library(ggplot2)
qplot(date, steps, data = activity_data)
qplot(date, steps, data = activity_data, geom = "histogram")
qplot(steps, data = activity_data, geom = "histogram")
library(plyr)
?ddply
totalsteps <- plyr::ddply(activity_data, activity_data$date, sum, na.rm = TRUE)
library(dplyr)
activity_data <- read.csv(unz("activity.zip","activity.csv"))
#activity_data$date <- as.Date(activity_data$date, "%Y-%m-%d")
activity_data <- group_by(activity_data, date)
head(activity_data)
totalsteps <- plyr::ddply(activity_data, activity_data$date, sum, na.rm = TRUE)
totalsteps <- plyr::ddply(activity_data, .(date),summarize, steps.by.day = sum(steps))
View(totalsteps)
totalsteps <- plyr::ddply(activity_data, .(date),summarize, steps.by.day = sum(steps, na.rm = TRUE))
qplot(steps.by.day, data = totalsteps)
totalsteps <- plyr::ddply(activity_data, .(date),summarize, mean.steps = sum(steps, na.rm = TRUE), median.steps = median(steps, na.rm = TRUE))
totalsteps <- plyr::ddply(activity_data, .(date),summarize, total.steps = sum(steps, na.rm = TRUE), mean.steps = mean(steps, na.rm = TRUE))
?median
totalsteps <- plyr::ddply(activity_data, .(date),summarize, total.steps = sum(steps, na.rm = TRUE), mean.steps = mean(steps, na.rm = TRUE), median.steps = median(steps, na.rm = TRUE))
View(totalsteps)
median_steps <- plyr::ddply(activity_data, .(date), summarize, median.steps = median(steps, na.rm = TRUE))
View(median_steps)
?read.csv
library(dplyr)
activity_data <- read.csv(unz("activity.zip","activity.csv"), na.strings = "NA")
#activity_data$date <- as.Date(activity_data$date, "%Y-%m-%d")
activity_data <- group_by(activity_data, date)
head(activity_data)
View(activity_data)
median_steps <- plyr::ddply(activity_data, .(date), summarize, median.steps = median(steps, na.rm = TRUE))
View(median_steps)
?median.default
?ave
test_ave <- ave(activity_data, date)
test_ave <- ave(activity_data, activity_data$date)
warnings()
test_ave <- ave(activity_data, activity_data$date, FUN = mean, na.rm = TRUE)
test_ave <- ave(activity_data, activity_data$date, FUN = function(x) mean(x, na.rm = TRUE))
debug(ddply)
library(plyr)
totalsteps <- plyr::ddply(activity_data, .(date), summarize, total.steps = sum(steps, na.rm = TRUE), mean.steps = mean(steps, na.rm = TRUE), median.steps = median(steps, na.rm = TRUE))
View(totalsteps)
qplot(total.steps, data = totalsteps)
qplot(total.steps, data = totalsteps)
debug()
?qplot
qplot(total.steps, data = totalsteps, binwidth = 10)
Q
undebug(ddply)
qplot(total.steps, data = totalsteps, binwidth = 10)
qplot(total.steps, data = totalsteps, binwidth = 1)
qplot(total.steps, data = totalsteps)
qplot(total.steps, data = totalsteps, bins = 20)
qplot(total.steps, data = totalsteps, bins = 10)
qplot(total.steps, data = totalsteps, bins = 15)
qplot(total.steps, data = totalsteps, bins = 30)
qplot(total.steps, data = totalsteps, bins = 20)
View(totalsteps)
